// Mocks generated by Mockito 5.4.6 from annotations
// in yall/test/widgets/posting_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:yall/models/account.dart' as _i4;
import 'package:yall/models/platform_type.dart' as _i6;
import 'package:yall/models/post_result.dart' as _i2;
import 'package:yall/providers/account_manager.dart' as _i9;
import 'package:yall/providers/post_manager.dart' as _i3;
import 'package:yall/services/social_platform_service.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePostResult_0 extends _i1.SmartFake implements _i2.PostResult {
  _FakePostResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCharacterLimitValidation_1 extends _i1.SmartFake
    implements _i3.CharacterLimitValidation {
  _FakeCharacterLimitValidation_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAccount_2 extends _i1.SmartFake implements _i4.Account {
  _FakeAccount_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PostManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPostManager extends _i1.Mock implements _i3.PostManager {
  MockPostManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isPosting =>
      (super.noSuchMethod(Invocation.getter(#isPosting), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearLastResult() => super.noSuchMethod(
    Invocation.method(#clearLastResult, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i2.PostResult> publishToSelectedPlatforms(
    String? content,
    Set<_i6.PlatformType>? selectedPlatforms,
    Map<_i6.PlatformType, _i4.Account>? selectedAccounts,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#publishToSelectedPlatforms, [
              content,
              selectedPlatforms,
              selectedAccounts,
            ]),
            returnValue: _i5.Future<_i2.PostResult>.value(
              _FakePostResult_0(
                this,
                Invocation.method(#publishToSelectedPlatforms, [
                  content,
                  selectedPlatforms,
                  selectedAccounts,
                ]),
              ),
            ),
          )
          as _i5.Future<_i2.PostResult>);

  @override
  _i3.CharacterLimitValidation validateCharacterLimits(
    String? content,
    Set<_i6.PlatformType>? selectedPlatforms,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateCharacterLimits, [
              content,
              selectedPlatforms,
            ]),
            returnValue: _FakeCharacterLimitValidation_1(
              this,
              Invocation.method(#validateCharacterLimits, [
                content,
                selectedPlatforms,
              ]),
            ),
          )
          as _i3.CharacterLimitValidation);

  @override
  bool canPost(String? content, Set<_i6.PlatformType>? selectedPlatforms) =>
      (super.noSuchMethod(
            Invocation.method(#canPost, [content, selectedPlatforms]),
            returnValue: false,
          )
          as bool);

  @override
  int getCharacterLimit(Set<_i6.PlatformType>? selectedPlatforms) =>
      (super.noSuchMethod(
            Invocation.method(#getCharacterLimit, [selectedPlatforms]),
            returnValue: 0,
          )
          as int);

  @override
  int getRemainingCharacters(
    String? content,
    Set<_i6.PlatformType>? selectedPlatforms,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getRemainingCharacters, [
              content,
              selectedPlatforms,
            ]),
            returnValue: 0,
          )
          as int);

  @override
  Map<_i6.PlatformType, int> getCharacterLimitsForPlatforms(
    Set<_i6.PlatformType>? platforms,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getCharacterLimitsForPlatforms, [platforms]),
            returnValue: <_i6.PlatformType, int>{},
          )
          as Map<_i6.PlatformType, int>);

  @override
  Map<_i6.PlatformType, bool> validateContentForPlatforms(
    String? content,
    Set<_i6.PlatformType>? platforms,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#validateContentForPlatforms, [
              content,
              platforms,
            ]),
            returnValue: <_i6.PlatformType, bool>{},
          )
          as Map<_i6.PlatformType, bool>);

  @override
  _i7.SocialPlatformService? getPlatformService(_i6.PlatformType? platform) =>
      (super.noSuchMethod(Invocation.method(#getPlatformService, [platform]))
          as _i7.SocialPlatformService?);

  @override
  void setPostingForTesting(bool? isPosting) => super.noSuchMethod(
    Invocation.method(#setPostingForTesting, [isPosting]),
    returnValueForMissingStub: null,
  );

  @override
  void setErrorForTesting(String? error) => super.noSuchMethod(
    Invocation.method(#setErrorForTesting, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void setLastResultForTesting(_i2.PostResult? result) => super.noSuchMethod(
    Invocation.method(#setLastResultForTesting, [result]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AccountManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountManager extends _i1.Mock implements _i9.AccountManager {
  MockAccountManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Account> get accounts =>
      (super.noSuchMethod(
            Invocation.getter(#accounts),
            returnValue: <_i4.Account>[],
          )
          as List<_i4.Account>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  int get totalAccountCount =>
      (super.noSuchMethod(Invocation.getter(#totalAccountCount), returnValue: 0)
          as int);

  @override
  int get activeAccountCount =>
      (super.noSuchMethod(
            Invocation.getter(#activeAccountCount),
            returnValue: 0,
          )
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  List<_i4.Account> getAccountsForPlatform(_i6.PlatformType? platform) =>
      (super.noSuchMethod(
            Invocation.method(#getAccountsForPlatform, [platform]),
            returnValue: <_i4.Account>[],
          )
          as List<_i4.Account>);

  @override
  List<_i4.Account> getActiveAccountsForPlatform(_i6.PlatformType? platform) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveAccountsForPlatform, [platform]),
            returnValue: <_i4.Account>[],
          )
          as List<_i4.Account>);

  @override
  _i4.Account? getAccountById(String? accountId) =>
      (super.noSuchMethod(Invocation.method(#getAccountById, [accountId]))
          as _i4.Account?);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> loadAccounts() =>
      (super.noSuchMethod(
            Invocation.method(#loadAccounts, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i4.Account> addAccount({
    required _i6.PlatformType? platform,
    required String? displayName,
    required String? username,
    required Map<String, dynamic>? credentials,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addAccount, [], {
              #platform: platform,
              #displayName: displayName,
              #username: username,
              #credentials: credentials,
            }),
            returnValue: _i5.Future<_i4.Account>.value(
              _FakeAccount_2(
                this,
                Invocation.method(#addAccount, [], {
                  #platform: platform,
                  #displayName: displayName,
                  #username: username,
                  #credentials: credentials,
                }),
              ),
            ),
          )
          as _i5.Future<_i4.Account>);

  @override
  _i5.Future<_i4.Account> updateAccount(_i4.Account? updatedAccount) =>
      (super.noSuchMethod(
            Invocation.method(#updateAccount, [updatedAccount]),
            returnValue: _i5.Future<_i4.Account>.value(
              _FakeAccount_2(
                this,
                Invocation.method(#updateAccount, [updatedAccount]),
              ),
            ),
          )
          as _i5.Future<_i4.Account>);

  @override
  _i5.Future<void> removeAccount(String? accountId) =>
      (super.noSuchMethod(
            Invocation.method(#removeAccount, [accountId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<bool> validateAccount(_i4.Account? account) =>
      (super.noSuchMethod(
            Invocation.method(#validateAccount, [account]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> testAuthentication(_i4.Account? account) =>
      (super.noSuchMethod(
            Invocation.method(#testAuthentication, [account]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<void> setAccountActive(String? accountId, bool? isActive) =>
      (super.noSuchMethod(
            Invocation.method(#setAccountActive, [accountId, isActive]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i4.Account? getDefaultAccountForPlatform(_i6.PlatformType? platform) =>
      (super.noSuchMethod(
            Invocation.method(#getDefaultAccountForPlatform, [platform]),
          )
          as _i4.Account?);

  @override
  bool hasAccountsForPlatform(_i6.PlatformType? platform) =>
      (super.noSuchMethod(
            Invocation.method(#hasAccountsForPlatform, [platform]),
            returnValue: false,
          )
          as bool);

  @override
  bool hasActiveAccountsForPlatform(_i6.PlatformType? platform) =>
      (super.noSuchMethod(
            Invocation.method(#hasActiveAccountsForPlatform, [platform]),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Future<Map<String, bool>> validateAllAccounts() =>
      (super.noSuchMethod(
            Invocation.method(#validateAllAccounts, []),
            returnValue: _i5.Future<Map<String, bool>>.value(<String, bool>{}),
          )
          as _i5.Future<Map<String, bool>>);

  @override
  _i5.Future<bool> refreshAccount(String? accountId) =>
      (super.noSuchMethod(
            Invocation.method(#refreshAccount, [accountId]),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  void addAccountForTesting(_i4.Account? account) => super.noSuchMethod(
    Invocation.method(#addAccountForTesting, [account]),
    returnValueForMissingStub: null,
  );

  @override
  void clearAccountsForTesting() => super.noSuchMethod(
    Invocation.method(#clearAccountsForTesting, []),
    returnValueForMissingStub: null,
  );

  @override
  void setErrorForTesting(String? error) => super.noSuchMethod(
    Invocation.method(#setErrorForTesting, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
